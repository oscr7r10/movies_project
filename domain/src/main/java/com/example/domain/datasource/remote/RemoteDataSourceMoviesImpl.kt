package com.example.domain.datasource.remoteimport com.example.domain.api.MoviesAPIimport com.example.domain.datasource.remote.response.LatestMovieResponseimport com.example.domain.datasource.remote.response.NowPlayingResponseimport com.example.domain.datasource.remote.response.TopRatedResponseimport com.example.domain.mapper.transformToDomainimport com.example.domain.model.LatestMovieModelimport com.example.domain.model.NowPlayingModelimport com.example.domain.model.TopRatedModelimport com.example.domain.util.ErrorTypeimport com.example.domain.util.ResultApiimport kotlinx.coroutines.Dispatchersimport kotlinx.coroutines.withContextimport javax.inject.Injectclass RemoteDataSourceMoviesImpl @Inject constructor(private val api : MoviesAPI) :    RemoteDataSourceMovies {    override suspend fun getLatestMovies(): ResultApi<LatestMovieModel> {        val responseCall : LatestMovieResponse?        withContext(Dispatchers.IO){            responseCall = api.getLatestMovies()        }        responseCall?.let {result ->            return ResultApi.OnSuccess(result.transformToDomain())        } ?: return ResultApi.OnFailure(ErrorType.UNKNOWN,"")    }    override suspend fun getNowPlayingMovies(page : Int): ResultApi<NowPlayingModel> {        val responseCall : NowPlayingResponse?        withContext(Dispatchers.IO){            responseCall = api.getNowPlayingMovies(page)        }        responseCall?.let {result ->            return ResultApi.OnSuccess(result.transformToDomain())        } ?: return ResultApi.OnFailure(ErrorType.UNKNOWN,"")    }    override suspend fun getTopRatedMovies(page : Int): ResultApi<TopRatedModel> {        val responseCall : TopRatedResponse?        withContext(Dispatchers.IO){            responseCall = api.getTopRatedMovies(page)        }        responseCall?.let {result ->            return ResultApi.OnSuccess(result.transformToDomain())        } ?: return ResultApi.OnFailure(ErrorType.UNKNOWN,"")    }}